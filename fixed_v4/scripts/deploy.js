// // scripts/deploy.js
// const hre = require("hardhat");
// const fs  = require("fs");

// async function main() {
//   /*──────────────────── 기본 계정 ────────────────────*/
//   const [deployer] = await hre.ethers.getSigners();
//   console.log("Deployer:", deployer.address);

//   /*──────────────── 1. CrowdCoin (ERC-20) ────────────*/
//   const CrowdCoin = await hre.ethers.getContractFactory("CrowdCoin");
//   const fund      = await CrowdCoin.deploy();
//   await fund.waitForDeployment();
//   const fundAddr  = await fund.getAddress();
//   console.log("CrowdCoin:        ", fundAddr);

//   /*──────────────── 2. ImageNFT (ERC-721) ────────────*/
//   const ImageNFT = await hre.ethers.getContractFactory("ImageNFT");
//   const nft      = await ImageNFT.deploy();
//   await nft.waitForDeployment();
//   const nftAddr  = await nft.getAddress();
//   console.log("ImageNFT:         ", nftAddr);

//   /*──────────────── 3. CrowdFund (Core) ──────────────*/
//   const CrowdFund = await hre.ethers.getContractFactory("CrowdFund");
//   const cf        = await CrowdFund.deploy(fundAddr, nftAddr);
//   await cf.waitForDeployment();
//   const cfAddr    = await cf.getAddress();
//   console.log("CrowdFund:        ", cfAddr);

//   /*── 권한 이전: CrowdFund → mint/burn & NFT mint ────*/
//   await fund.transferOwnership(cfAddr);
//   await nft.transferOwnership(cfAddr);

//   /*──────────────── 4. GovernanceToken ───────────────*/
//   const GovToken = await hre.ethers.getContractFactory("GovernanceToken");
//   const gtoken   = await GovToken.deploy();
//   await gtoken.waitForDeployment();
//   const gtokenAddr = await gtoken.getAddress();
//   console.log("GovernanceToken:  ", gtokenAddr);

//   /*──────────────── 5. TimelockController ────────────*/
//   const FundTimelock = await hre.ethers.getContractFactory("FundTimelock");
//   const minDelay = 1;                               // 1-sec dev delay
//   const tl = await FundTimelock.deploy(minDelay, [], [], deployer.address);
//   await tl.waitForDeployment();
//   const tlAddr = await tl.getAddress();
//   console.log("Timelock:         ", tlAddr);

//   /*──────────────── 6. Governor ──────────────────────*/
//   const FundGovernor = await hre.ethers.getContractFactory("FundGovernor");
//   const gov = await FundGovernor.deploy(gtokenAddr, tlAddr);
//   await gov.waitForDeployment();
//   const govAddr = await gov.getAddress();
//   console.log("Governor:         ", govAddr);

//   /*── Timelock 역할 연결 ─────────────────────────────*/
//   const PROPOSER_ROLE = await tl.PROPOSER_ROLE();
//   const EXECUTOR_ROLE = await tl.EXECUTOR_ROLE();
//   await tl.grantRole(PROPOSER_ROLE,  govAddr);
//   await tl.grantRole(EXECUTOR_ROLE, hre.ethers.ZeroAddress); // anyone execute
//   await tl.revokeRole(PROPOSER_ROLE, deployer.address);

//   /*────────── 7. 데모 캠페인 #1 자동 생성 ────────────*/
//   const goalWei  = hre.ethers.parseEther("0.1"); // 0.1 ETH 목표
//   const duration = 3600;                         // 1시간
//   await cf.createCampaign(
//     goalWei,
//     duration,
//     "Demo Art #1",
//     "Demo Artist",
//     "https://picsum.photos/400"
//   );
//   console.log("Demo campaign #1 created.");

//   /*──────────────── .env.local 기록 ─────────────────*/
//   const env =
// `# Auto-generated by deploy.js
// VITE_CROWD_FUND_ADDRESS=${cfAddr}
// VITE_CROWDCOIN_ADDRESS=${fundAddr}
// VITE_GOVERNOR_ADDRESS=${govAddr}
// VITE_GOVTOKEN_ADDRESS=${gtokenAddr}
// VITE_TIMELOCK_ADDRESS=${tlAddr}
// `;
// // 1. .env.local 프론트 위치에 저장
// fs.writeFileSync("../Clone-tumblbug/tumblbug-clone/.env.local", env);

// // 2. ABI 복사
// fs.copyFileSync(
//   "./artifacts/contracts/CrowdFund.sol/CrowdFund.json",
//   "../Clone-tumblbug/tumblbug-clone/src/lib/abi/CrowdFund.json"
// );
//   console.log("✔  frontend/.env.local updated. + ABI copied : ../Clone-tumblbug/tumblbug-clone/src/lib/abi/CrowdFund.json");
// }

// main().catch((e) => {
//   console.error(e);
//   process.exitCode = 1;
// });


// scripts/deploy.js
const hre = require("hardhat");
const fs  = require("fs");
const path = require("path");

async function main() {
  /*────────────────── 0. 기본 계정 ──────────────────*/
  const [deployer] = await hre.ethers.getSigners();
  console.log("Deployer:", deployer.address);

  /*──────────────── 1. CrowdCoin ────────────────────*/
  const CoinF = await hre.ethers.getContractFactory("CrowdCoin");
  const coin  = await CoinF.deploy();
  await coin.waitForDeployment();
  const coinAddr = await coin.getAddress();
  console.log("CrowdCoin:        ", coinAddr);

  /*──────────────── 2. ImageNFT ─────────────────────*/
  const NftF = await hre.ethers.getContractFactory("ImageNFT");
  const nft  = await NftF.deploy();
  await nft.waitForDeployment();
  const nftAddr = await nft.getAddress();
  console.log("ImageNFT:         ", nftAddr);

  /*──────────────── 3. CrowdFund ────────────────────*/
  const FundF = await hre.ethers.getContractFactory("CrowdFund");
  const fund  = await FundF.deploy(coinAddr, nftAddr);
  await fund.waitForDeployment();
  const fundAddr = await fund.getAddress();
  console.log("CrowdFund:        ", fundAddr);

  /*── 권한 이전 ─────────────────────────────────────*/
  await coin.transferOwnership(fundAddr);
  await nft.transferOwnership(fundAddr);

  /*──────────────── 4. GovernanceToken ──────────────*/
  const GovF = await hre.ethers.getContractFactory("GovernanceToken");
  const gtok = await GovF.deploy();
  await gtok.waitForDeployment();
  const gtokAddr = await gtok.getAddress();
  console.log("GovernanceToken:  ", gtokAddr);

  /*──────────────── 5. TimelockController ───────────*/
  const TL_F = await hre.ethers.getContractFactory("FundTimelock");
  const tl   = await TL_F.deploy(1, [], [], deployer.address);
  await tl.waitForDeployment();
  const tlAddr = await tl.getAddress();
  console.log("Timelock:         ", tlAddr);

  /*──────────────── 6. Governor ─────────────────────*/
  const GovCoreF = await hre.ethers.getContractFactory("FundGovernor");
  const gov = await GovCoreF.deploy(gtokAddr, tlAddr);
  await gov.waitForDeployment();
  const govAddr = await gov.getAddress();
  console.log("Governor:         ", govAddr);

  /*──── Timelock 역할 연결 ──────────────────────────*/
  await tl.grantRole(await tl.PROPOSER_ROLE(),  govAddr);
  await tl.grantRole(await tl.EXECUTOR_ROLE(), hre.ethers.ZeroAddress);
  await tl.revokeRole(await tl.PROPOSER_ROLE(), deployer.address);

  /*──────── 7. 데모 캠페인 #1 생성 ───────────────────*/
  await fund.createCampaign(
    hre.ethers.parseEther("0.1"),   // goal
    3600,                           // 1h
    "Demo Art #1",
    "Demo Artist",
    "https://picsum.photos/400"
  );
  console.log("Demo campaign #1 created.");

  /*──────────────── 8. .env.local 기록 ──────────────*/
  const envTxt = `# Auto-generated by deploy.js
VITE_CROWD_FUND_ADDRESS=${fundAddr}
VITE_CROWDCOIN_ADDRESS=${coinAddr}
VITE_GOVERNOR_ADDRESS=${govAddr}
VITE_GOVTOKEN_ADDRESS=${gtokAddr}
VITE_TIMELOCK_ADDRESS=${tlAddr}
`;

  // A) 리액트 클론 폴더
  const cloneEnv = path.resolve("../Clone-tumblbug/tumblbug-clone/.env.local");
  fs.mkdirSync(path.dirname(cloneEnv), { recursive: true });
  fs.writeFileSync(cloneEnv, envTxt);

  // B) 기본 frontend 폴더
  const feEnv   = path.resolve("./frontend/.env.local");
  fs.mkdirSync(path.dirname(feEnv), { recursive: true });
  fs.writeFileSync(feEnv, envTxt);

  /*──────────────── 9. CrowdFund ABI 복사 ────────────*/
  const srcAbi = "./artifacts/contracts/CrowdFund.sol/CrowdFund.json";
  const dstAbi = "../Clone-tumblbug/tumblbug-clone/src/lib/abi/CrowdFund.json";
  fs.mkdirSync(path.dirname(dstAbi), { recursive: true });
  fs.copyFileSync(srcAbi, dstAbi);

  console.log("✔  env & ABI copied.");
}

main().catch((e) => {
  console.error(e);
  process.exitCode = 1;
});
