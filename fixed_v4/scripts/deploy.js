// scripts/deploy.js
const hre = require("hardhat");
const fs  = require("fs");

async function main() {
  /*──────────────────── 기본 계정 ────────────────────*/
  const [deployer] = await hre.ethers.getSigners();
  console.log("Deployer:", deployer.address);

  /*──────────────── 1. CrowdCoin (ERC-20) ─────────────*/
  const CrowdCoin = await hre.ethers.getContractFactory("CrowdCoin");
  const fund      = await CrowdCoin.deploy();         // no params
  await fund.waitForDeployment();
  const fundAddr  = await fund.getAddress();
  console.log("CrowdCoin:        ", fundAddr);

  /*──────────────── 2. ImageNFT (ERC-721) ─────────────*/
  const ImageNFT = await hre.ethers.getContractFactory("ImageNFT");
  const nft      = await ImageNFT.deploy();
  await nft.waitForDeployment();
  const nftAddr  = await nft.getAddress();
  console.log("ImageNFT:         ", nftAddr);

  /*──────────────── 3. CrowdFund (Core) ───────────────*/
  const CrowdFund = await hre.ethers.getContractFactory("CrowdFund");
  const cf        = await CrowdFund.deploy(fundAddr, nftAddr);
  await cf.waitForDeployment();
  const cfAddr    = await cf.getAddress();
  console.log("CrowdFund:        ", cfAddr);

  /*── 리워드·NFT Mint 권한 CrowdFund 로 이전 ──────────*/
  await fund.transferOwnership(cfAddr);
  await nft.transferOwnership(cfAddr);

  /*──────────────── 4. GovernanceToken ────────────────*/
  const GovToken  = await hre.ethers.getContractFactory("GovernanceToken");
  const gtoken    = await GovToken.deploy();
  await gtoken.waitForDeployment();
  const gtokenAddr = await gtoken.getAddress();
  console.log("GovernanceToken:  ", gtokenAddr);

  /*──────────────── 5. TimelockController ─────────────*/
  const FundTimelock = await hre.ethers.getContractFactory("FundTimelock");
  const minDelay  = 1;              // 1-sec delay (dev)
  const tl        = await FundTimelock.deploy(
                      minDelay, [], [], deployer.address
                    );
  await tl.waitForDeployment();
  const tlAddr    = await tl.getAddress();
  console.log("Timelock:         ", tlAddr);

  /*──────────────── 6. Governor ───────────────────────*/
  const FundGovernor = await hre.ethers.getContractFactory("FundGovernor");
  const gov      = await FundGovernor.deploy(gtokenAddr, tlAddr);
  await gov.waitForDeployment();
  const govAddr  = await gov.getAddress();
  console.log("Governor:         ", govAddr);

  /*── Timelock 역할(proposer/executor) 세팅 ───────────*/
  const PROPOSER_ROLE = await tl.PROPOSER_ROLE();
  const EXECUTOR_ROLE = await tl.EXECUTOR_ROLE();
  await tl.grantRole(PROPOSER_ROLE,  govAddr);
  await tl.grantRole(EXECUTOR_ROLE, hre.ethers.ZeroAddress);  // anyone execute
  await tl.revokeRole(PROPOSER_ROLE, deployer.address);

  /*──────────────── .env.local 기록 ──────────────────*/
  const env =
`# Auto-generated by deploy.js
VITE_CROWD_FUND_ADDRESS=${cfAddr}
VITE_CROWDCOIN_ADDRESS=${fundAddr}
VITE_GOVERNOR_ADDRESS=${govAddr}
VITE_GOVTOKEN_ADDRESS=${gtokenAddr}
VITE_TIMELOCK_ADDRESS=${tlAddr}
`;
  fs.writeFileSync("./frontend/.env.local", env);
  console.log("✔  frontend/.env.local updated.");
}

main().catch((e) => {
  console.error(e);
  process.exitCode = 1;
});

/*────────────── 7. 테스트 캠페인 한 개 자동 생성 ─────────────*/
const goalWei   = hre.ethers.parseEther("0.1"); // 0.1 ETH 목표
const duration  = 3600;                         // 1시간
await cf.createCampaign(
  goalWei,
  duration,
  "Demo Art #1",
  "Demo Artist",
  "https://picsum.photos/400"
);
console.log("Demo campaign #1 created.");
